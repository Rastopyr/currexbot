defmodule Currexbot.Bot do
  @moduledoc """
  Handles commands from a Telegram chat
  """
  alias Nadia.Model.Message
  alias Nadia.Model.Chat
  alias Nadia.Model.ReplyKeyboardMarkup
  alias Currexbot.Bank
  alias Currexbot.City
  alias Currexbot.Currency
  alias Currexbot.Repo
  alias Currexbot.User
  import Enum, only: [at: 2]

  @usd_list ["/usd", "–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ üíµ"]
  @eur_list ["/eur", "–ö—É—Ä—Å –µ–≤—Ä–æ üí∂"]
  @current_city_list ["/city", "–í–∞—à –≥–æ—Ä–æ–¥ üèô"]
  @settings_list ["/settings", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ üîß"]

  @doc """
  Handle incoming message
  """
  def handle_message(%Message{chat: %Chat{type: "private", id: chat_id}, text: text}) do
    user = User.find_or_create_by_chat_id(chat_id)

    handle_private_message(user, chat_id, text)
  end

  # Fallback
  def handle_message(_), do: true

  # Ping
  defp handle_private_message(_user, chat_id, "ping") do
    Nadia.send_message(chat_id, "pong")
  end

  defp handle_private_message(_user, chat_id, "/me") do
    {:ok, %Nadia.Model.User{first_name: bot_name}} = Nadia.get_me
    env = Application.get_env(:currexbot, :env)
    reply = """
    #{bot_name} in #{env} mode.
    Current directory: #{System.cwd}
    """

    Nadia.send_message(chat_id, reply)
  end

  # Sends actual USD rates to the chat sorted by a bank's name.
  defp handle_private_message(user, chat_id, text) when text in @usd_list do
    reply = Currency.get_rates(user, "USD")

    Nadia.send_message(chat_id, reply, reply_markup: default_kbd)
  end

  # Sends actual USD rates to the chat sorted by buy value in descending order.
  defp handle_private_message(user, chat_id, "/usd " <> sort_el) do
    reply = Currency.get_rates(user, "USD", sort_el)

    Nadia.send_message(chat_id, reply)
  end

  # Sends actual EUR rates to the chat sorted by a bank's name.
  defp handle_private_message(user, chat_id, text) when text in @eur_list do
    reply = Currency.get_rates(user, "EUR")

    Nadia.send_message(chat_id, reply, reply_markup: default_kbd)
  end

  # Sends actual EUR rates to the chat sorted by buy value in descending order.
  defp handle_private_message(user, chat_id, "/eur " <> sort_el) do
    reply = Currency.get_rates(user, "EUR", sort_el)

    Nadia.send_message(chat_id, reply)
  end

  #
  # Settings commands
  #
  defp handle_private_message(user, chat_id, text) when text in @settings_list do
    Nadia.send_message(chat_id, "–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup: settings_kbd)
  end

  defp handle_private_message(user, chat_id, "–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –±–∞–Ω–∫–∏ ‚≠êÔ∏è") do
    reply =
      case user.fav_banks do
        [] -> "–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –±–∞–Ω–∫–æ–≤"
        _ -> "–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –±–∞–Ω–∫–∏:\n" <> Enum.join(user.fav_banks, "\n")
      end

    Nadia.send_message(chat_id, reply, reply_markup: fav_banks_kbd)
  end

  defp handle_private_message(user, chat_id, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∞–Ω–∫–∏") do
    banks = Bank.available_in_city
    reply = Enum.join(banks, "\n")

    Nadia.send_message(chat_id, reply, reply_markup: fav_banks_kbd)
  end

  defp handle_private_message(user, chat_id, "–î–æ–±–∞–≤–∏—Ç—å –±–∞–Ω–∫") do
    reply = "–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫:"

    Nadia.send_message(chat_id, reply, reply_markup: banks_to_add_kbd(user))
  end

  defp handle_private_message(user, chat_id, "–£–¥–∞–ª–∏—Ç—å –±–∞–Ω–∫") do
    reply = "–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫:"

    Nadia.send_message(chat_id, reply, reply_markup: banks_to_remove_kbd(user))
  end

  defp handle_private_message(user, chat_id, "–û—á–∏—Å—Ç–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ") do
    user_change = Ecto.Changeset.change(user, fav_banks: [])
    Repo.update(user_change)

    user = User.find_or_create_by_chat_id(chat_id)
    handle_private_message(user, chat_id, "–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –±–∞–Ω–∫–∏ ‚≠êÔ∏è")
  end

  defp handle_private_message(user, chat_id, "‚≠ê " <> bank) do
    user_change = Ecto.Changeset.change(user, fav_banks: user.fav_banks ++ [bank])
    Repo.update(user_change)

    user = User.find_or_create_by_chat_id(chat_id)
    handle_private_message(user, chat_id, "–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –±–∞–Ω–∫–∏ ‚≠êÔ∏è")
  end

  defp handle_private_message(user, chat_id, "‚ùå " <> bank) do
    user_change = Ecto.Changeset.change user, fav_banks: user.fav_banks -- [bank]
    Repo.update user_change

    user = User.find_or_create_by_chat_id(chat_id)
    handle_private_message(user, chat_id, "–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –±–∞–Ω–∫–∏ ‚≠êÔ∏è")
  end

  defp handle_private_message(user, chat_id, "/city " <> city_name) do
    city = Repo.get_by(City, name: city_name)
    reply =
      case city do
        %City{} ->
          changeset = User.changeset(user, %{city_id: city.id})
          Repo.update!(changeset)
          "–í–∞—à —Ç–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥ ‚Äî " <> city_name
        nil ->
          "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∞—à –≥–æ—Ä–æ–¥ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"
      end

    Nadia.send_message(chat_id, reply)
  end

  defp handle_private_message(user, chat_id, text) when text in @current_city_list do
    city = user.city.name
    reply = "–í–∞—à —Ç–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥ ‚Äî " <> city

    Nadia.send_message(chat_id, reply)
  end

  # Exchange rates commands
  defp handle_private_message(_user, chat_id, _) do
    Nadia.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:", reply_markup: default_kbd)
  end

  # Keyboards
  defp default_kbd do
    %ReplyKeyboardMarkup{keyboard: [
                          [at(@usd_list, 1)],
                          [at(@eur_list, 1)],
                          [at(@settings_list, 1)]
                         ],
                         resize_keyboard: true,
                         one_time_keyboard: true}
  end

  defp settings_kbd do
    %ReplyKeyboardMarkup{keyboard: [
                          ["–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –±–∞–Ω–∫–∏ ‚≠êÔ∏è"],
                          [at(@current_city_list, 1)],
                          ["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
                         ],
                         resize_keyboard: true,
                         one_time_keyboard: true}
  end

  defp fav_banks_kbd do
    %ReplyKeyboardMarkup{keyboard: [
                          ["–î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∞–Ω–∫–∏"],
                          ["–î–æ–±–∞–≤–∏—Ç—å –±–∞–Ω–∫"],
                          ["–£–¥–∞–ª–∏—Ç—å –±–∞–Ω–∫"],
                          ["–û—á–∏—Å—Ç–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"],
                          ["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
                         ],
                         resize_keyboard: true,
                         one_time_keyboard: true}
  end

  defp banks_to_add_kbd(user, city_code \\ "7801") do
    banks = Bank.available_in_city(city_code) -- user.fav_banks
    banks_cmds = Enum.map(banks, fn(x) -> ["‚≠ê " <> x] end)
    buttons = [["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]] ++ banks_cmds

    %ReplyKeyboardMarkup{keyboard: buttons,
                         resize_keyboard: true,
                         one_time_keyboard: true}
  end

  defp banks_to_remove_kbd(user, city_code \\ "7801") do
    banks = Enum.map(user.fav_banks, fn(x) -> ["‚ùå " <> x] end)
    buttons = [["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]] ++ banks

    %ReplyKeyboardMarkup{keyboard: buttons,
                         resize_keyboard: true,
                         one_time_keyboard: true}
  end
end
